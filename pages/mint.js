import Head from 'next/head'
import Image from 'next/image'
import styles from '../styles/Home.module.css'
import { useEffect, useState } from 'react'
import { xcubeTokenAbi, saleNftTokenAbi, xcubeTokenAddress, saleNftTokenAddress } from '../src/ethereum-env'
import { Button, InputGroup, FormControl, Form  } from 'react-bootstrap'

let Web3 = require('web3')



export default function Mint() {
  const [web3, setWeb3] = useState(null)
  const [xcubeTokenContract, setXcubeTokenContract] = useState(null)
  const [saleNftTokenContract, setSaleNftTokenContract] = useState(null)

  const [wallet, setWallet] = useState('');
  const [balance, setBalance] = useState(0);
  const [tokenId, setTokenId] = useState(0);

  const [nftPrice, setNftPrice] = useState(0);
  const [tokenURI, setTokenURI] = useState('');

  const getWallet = async () => {
    try {
      if (window.ethereum) {
        const wallets = await window.ethereum.request({
          method: "eth_requestAccounts",
        });

        setWallet(wallets[0]);
        let w3 = new Web3(window.ethereum)
        setWeb3(w3)

        let x = new w3.eth.Contract(xcubeTokenAbi, xcubeTokenAddress)
        setXcubeTokenContract(x)

        let s = new w3.eth.Contract(saleNftTokenAbi, saleNftTokenAddress)
        setSaleNftTokenContract(s)
      } else {
        alert('you must install metamask')
      }
    } catch (error) {
      console.error(error);
    }
  };

  useEffect(() => {
    getWallet();
    console.log(wallet)
  }, [wallet]);

  const onClickMint = async () => {
    try {
      if (!wallet) return;
      if (!web3) return;
      if (!xcubeTokenContract) return;
      if (nftPrice <= 0 || tokenURI === '') {
        alert('input price and tokenURI')
        return;
      }

      console.log(tokenURI + ' / ' + nftPrice)

      const response = await xcubeTokenContract.methods
        .mintNFT(tokenURI)
        .send({ from : wallet, value : nftPrice });
      
      if (response.status) {
        console.log('it true')
        const balanceLength = await xcubeTokenContract.methods
          .balanceOf(wallet)
          .call();
        
          console.log(balanceLength)

        const tokenId = await xcubeTokenContract.methods
          .tokenOfOwnerByIndex(wallet, parseInt(balanceLength, 10) - 1)
          .call();

          setBalance(balanceLength);
          setTokenId(tokenId);
          
      }
      
    } catch (error) {
      console.error(error);
    }
  };

  return (
    <div className={styles.container}>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className={styles.main}>
      <Form.Label htmlFor="basic-url">enter tokenURI</Form.Label>
      <InputGroup className="mb-3">
        <InputGroup.Text id="basic-addon3">
          https://ipfs.io/ipfs/QmdTG3ZZxZEnCAswaAYjM4tMEsPCjWdc9917NdNjVfuY5e
        </InputGroup.Text>
        <FormControl id="basic-url" aria-describedby="basic-addon3" value={tokenURI} onChange={e => setTokenURI(e.target.value)} />
      </InputGroup>
      <InputGroup className="mb-3">
        <InputGroup.Text>Ether</InputGroup.Text>
        <FormControl aria-label="Amount (to the nearest Ether)" value={nftPrice} onChange={e => setNftPrice(e.target.value)}/>
        <InputGroup.Text>.00</InputGroup.Text>
      </InputGroup>
        <Button onClick={() => onClickMint()}>mint</Button>
      </main>

      <footer className={styles.footer}>
        <a
          href="https://vercel.com?utm_source=create-next-app&utm_medium=default-template&utm_campaign=create-next-app"
          target="_blank"
          rel="noopener noreferrer"
        >
          Powered by{' '}
          <span className={styles.logo}>
            <Image src="/vercel.svg" alt="Vercel Logo" width={72} height={16} />
          </span>
        </a>
      </footer>
    </div>
  )
}
